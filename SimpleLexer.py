# Generated from Simple.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,264,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
        12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,
        20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
        25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,
        29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,237,8,31,1,32,4,32,240,
        8,32,11,32,12,32,241,1,33,1,33,5,33,246,8,33,10,33,12,33,249,9,33,
        1,33,3,33,252,8,33,1,34,1,34,1,35,1,35,1,36,4,36,259,8,36,11,36,
        12,36,260,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,0,71,0,73,35,1,0,4,2,0,65,90,97,122,1,0,
        49,57,1,0,48,57,3,0,9,10,13,13,32,32,278,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,
        79,1,0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,88,1,0,0,0,13,94,1,0,0,0,
        15,97,1,0,0,0,17,101,1,0,0,0,19,105,1,0,0,0,21,107,1,0,0,0,23,109,
        1,0,0,0,25,111,1,0,0,0,27,114,1,0,0,0,29,117,1,0,0,0,31,120,1,0,
        0,0,33,122,1,0,0,0,35,124,1,0,0,0,37,126,1,0,0,0,39,132,1,0,0,0,
        41,136,1,0,0,0,43,141,1,0,0,0,45,146,1,0,0,0,47,148,1,0,0,0,49,154,
        1,0,0,0,51,159,1,0,0,0,53,165,1,0,0,0,55,169,1,0,0,0,57,172,1,0,
        0,0,59,175,1,0,0,0,61,180,1,0,0,0,63,236,1,0,0,0,65,239,1,0,0,0,
        67,251,1,0,0,0,69,253,1,0,0,0,71,255,1,0,0,0,73,258,1,0,0,0,75,76,
        5,45,0,0,76,2,1,0,0,0,77,78,5,43,0,0,78,4,1,0,0,0,79,80,5,40,0,0,
        80,6,1,0,0,0,81,82,5,41,0,0,82,8,1,0,0,0,83,84,5,116,0,0,84,85,5,
        114,0,0,85,86,5,117,0,0,86,87,5,101,0,0,87,10,1,0,0,0,88,89,5,102,
        0,0,89,90,5,97,0,0,90,91,5,108,0,0,91,92,5,115,0,0,92,93,5,101,0,
        0,93,12,1,0,0,0,94,95,5,111,0,0,95,96,5,114,0,0,96,14,1,0,0,0,97,
        98,5,97,0,0,98,99,5,110,0,0,99,100,5,100,0,0,100,16,1,0,0,0,101,
        102,5,110,0,0,102,103,5,111,0,0,103,104,5,116,0,0,104,18,1,0,0,0,
        105,106,5,61,0,0,106,20,1,0,0,0,107,108,5,60,0,0,108,22,1,0,0,0,
        109,110,5,62,0,0,110,24,1,0,0,0,111,112,5,60,0,0,112,113,5,61,0,
        0,113,26,1,0,0,0,114,115,5,62,0,0,115,116,5,61,0,0,116,28,1,0,0,
        0,117,118,5,60,0,0,118,119,5,62,0,0,119,30,1,0,0,0,120,121,5,42,
        0,0,121,32,1,0,0,0,122,123,5,47,0,0,123,34,1,0,0,0,124,125,5,59,
        0,0,125,36,1,0,0,0,126,127,5,98,0,0,127,128,5,101,0,0,128,129,5,
        103,0,0,129,130,5,105,0,0,130,131,5,110,0,0,131,38,1,0,0,0,132,133,
        5,101,0,0,133,134,5,110,0,0,134,135,5,100,0,0,135,40,1,0,0,0,136,
        137,5,101,0,0,137,138,5,120,0,0,138,139,5,105,0,0,139,140,5,116,
        0,0,140,42,1,0,0,0,141,142,5,103,0,0,142,143,5,111,0,0,143,144,5,
        116,0,0,144,145,5,111,0,0,145,44,1,0,0,0,146,147,5,58,0,0,147,46,
        1,0,0,0,148,149,5,112,0,0,149,150,5,114,0,0,150,151,5,105,0,0,151,
        152,5,110,0,0,152,153,5,116,0,0,153,48,1,0,0,0,154,155,5,114,0,0,
        155,156,5,101,0,0,156,157,5,97,0,0,157,158,5,100,0,0,158,50,1,0,
        0,0,159,160,5,108,0,0,160,161,5,97,0,0,161,162,5,98,0,0,162,163,
        5,101,0,0,163,164,5,108,0,0,164,52,1,0,0,0,165,166,5,118,0,0,166,
        167,5,97,0,0,167,168,5,114,0,0,168,54,1,0,0,0,169,170,5,58,0,0,170,
        171,5,61,0,0,171,56,1,0,0,0,172,173,5,105,0,0,173,174,5,102,0,0,
        174,58,1,0,0,0,175,176,5,116,0,0,176,177,5,104,0,0,177,178,5,101,
        0,0,178,179,5,110,0,0,179,60,1,0,0,0,180,181,5,101,0,0,181,182,5,
        108,0,0,182,183,5,115,0,0,183,184,5,101,0,0,184,62,1,0,0,0,185,186,
        5,97,0,0,186,187,5,110,0,0,187,237,5,100,0,0,188,189,5,111,0,0,189,
        237,5,114,0,0,190,191,5,110,0,0,191,192,5,111,0,0,192,237,5,116,
        0,0,193,194,5,105,0,0,194,237,5,102,0,0,195,196,5,116,0,0,196,197,
        5,104,0,0,197,198,5,101,0,0,198,237,5,110,0,0,199,200,5,101,0,0,
        200,201,5,108,0,0,201,202,5,115,0,0,202,237,5,101,0,0,203,204,5,
        103,0,0,204,205,5,111,0,0,205,206,5,116,0,0,206,237,5,111,0,0,207,
        208,5,112,0,0,208,209,5,114,0,0,209,210,5,105,0,0,210,211,5,110,
        0,0,211,237,5,116,0,0,212,213,5,114,0,0,213,214,5,101,0,0,214,215,
        5,97,0,0,215,237,5,100,0,0,216,217,5,98,0,0,217,218,5,101,0,0,218,
        219,5,103,0,0,219,220,5,105,0,0,220,237,5,110,0,0,221,222,5,101,
        0,0,222,223,5,110,0,0,223,237,5,100,0,0,224,225,5,101,0,0,225,226,
        5,120,0,0,226,227,5,105,0,0,227,237,5,116,0,0,228,229,5,108,0,0,
        229,230,5,97,0,0,230,231,5,98,0,0,231,232,5,101,0,0,232,237,5,108,
        0,0,233,234,5,118,0,0,234,235,5,97,0,0,235,237,5,114,0,0,236,185,
        1,0,0,0,236,188,1,0,0,0,236,190,1,0,0,0,236,193,1,0,0,0,236,195,
        1,0,0,0,236,199,1,0,0,0,236,203,1,0,0,0,236,207,1,0,0,0,236,212,
        1,0,0,0,236,216,1,0,0,0,236,221,1,0,0,0,236,224,1,0,0,0,236,228,
        1,0,0,0,236,233,1,0,0,0,237,64,1,0,0,0,238,240,7,0,0,0,239,238,1,
        0,0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,66,1,0,
        0,0,243,247,3,69,34,0,244,246,3,71,35,0,245,244,1,0,0,0,246,249,
        1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,252,1,0,0,0,249,247,
        1,0,0,0,250,252,5,48,0,0,251,243,1,0,0,0,251,250,1,0,0,0,252,68,
        1,0,0,0,253,254,7,1,0,0,254,70,1,0,0,0,255,256,7,2,0,0,256,72,1,
        0,0,0,257,259,7,3,0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,
        0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,6,36,0,0,263,74,1,
        0,0,0,6,0,236,241,247,251,260,1,6,0,0
    ]

class SimpleLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    KEYWORDS = 32
    IDENT = 33
    NUM = 34
    WS = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'-'", "'+'", "'('", "')'", "'true'", "'false'", "'or'", "'and'", 
            "'not'", "'='", "'<'", "'>'", "'<='", "'>='", "'<>'", "'*'", 
            "'/'", "';'", "'begin'", "'end'", "'exit'", "'goto'", "':'", 
            "'print'", "'read'", "'label'", "'var'", "':='", "'if'", "'then'", 
            "'else'" ]

    symbolicNames = [ "<INVALID>",
            "KEYWORDS", "IDENT", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "KEYWORDS", 
                  "IDENT", "NUM", "NonZeroDigit", "Digit", "WS" ]

    grammarFileName = "Simple.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


